UProd_F <- sort(unique(Prod_fall$item))
## remove blanks
UProd_F <- keep(UProd_F, UProd_F>0)
## find difference between summer and winter/fall (spring and summer are the same)
d_suw <- UProd_Su[!(UProd_Su %in% UProd_W)]
d_suf <- UProd_Su[!(UProd_Su %in% UProd_F)]
## append missing elements to season production lists
UProd_W <- append(UProd_W, d_suw)
UProd_W <- sort(UProd_W)
UProd_F <- append(UProd_F, d_suf)
UProd_F <- sort(UProd_F)
## make dataframes to add to for each season
LH_names <- as.data.frame(LH_data[,c(1, 34,35)])
colnames(LH_names)[1] <- "Farm Name"
LH_names$ID <- paste(LH_names$City, LH_names$State, sep=",")
LH_names_f <- cbind(LH_names, LH_data[,c(4, 21:33)])
LH_prod_f <- LH_names
LH_prod_sp <- LH_names
LH_prod_su <- LH_names
LH_prod_w <- LH_names
## iterate through our product lists and check if a farm is producing that item in that season
for (x in UProd_F){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_fall, fixed=TRUE)
LH_prod_f <- cbind(LH_prod_f, FPL)
colnames(LH_prod_f)[which(names(LH_prod_f) == "FPL")] <- FPL_name
}
for (x in UProd_Sp){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_spring, fixed=TRUE)
LH_prod_sp <- cbind(LH_prod_sp, FPL)
colnames(LH_prod_sp)[which(names(LH_prod_sp) == "FPL")] <- FPL_name
}
for (x in UProd_Su){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_summer, fixed=TRUE)
LH_prod_su <- cbind(LH_prod_su, FPL)
colnames(LH_prod_su)[which(names(LH_prod_su) == "FPL")] <- FPL_name
}
for (x in UProd_W){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_winter, fixed=TRUE)
LH_prod_w <- cbind(LH_prod_w, FPL)
colnames(LH_prod_w)[which(names(LH_prod_w) == "FPL")] <- FPL_name
}
## convert logical columns to numeric
### Base
cols <- sapply(LH_data, is.logical)
LH_data[,cols] <- lapply(LH_data[,cols], as.numeric)
### Fall
f_cols <- sapply(LH_prod_f, is.logical)
LH_prod_f[,f_cols] <- lapply(LH_prod_f[,f_cols], as.numeric)
### Spring
sp_cols <- sapply(LH_prod_sp, is.logical)
LH_prod_sp[,sp_cols] <- lapply(LH_prod_sp[,sp_cols], as.numeric)
### Summer
su_cols <- sapply(LH_prod_su, is.logical)
LH_prod_su[,su_cols] <- lapply(LH_prod_su[,su_cols], as.numeric)
### Winter
w_cols <- sapply(LH_prod_w, is.logical)
LH_prod_w[,w_cols] <- lapply(LH_prod_w[,w_cols], as.numeric)
LH_prod <- cbind(LH_prod_f, LH_prod_w[,5:213], LH_prod_sp[,5:213], LH_prod_su[,5:213])
## make dataframes to add to for each season
LH_names <- as.data.frame(LH_data[,c(1, 34,35)])
colnames(LH_names)[1] <- "Farm Name"
LH_names$ID <- paste(LH_names$City, LH_names$State, sep=",")
## make dataframes to add to for each season
LH_names <- as.data.frame(LH_data[,c(1, 34,35)])
colnames(LH_names)[1] <- "Farm Name"
LH_names$ID <- paste(LH_names$City, LH_names$State, sep=",")
LH_names <- cbind(LH_names, LH_data[,c(4, 21:33)])
LH_prod_f <- LH_names %>% mutate(Season="Fall")
LH_prod_sp <- LH_names %>% mutate(Season="Spring")
LH_prod_su <- LH_names %>% mutate(Season="Summer")
LH_prod_w <- LH_names %>% mutate(Season="Winter")
## iterate through our product lists and check if a farm is producing that item in that season
for (x in UProd_F){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_fall, fixed=TRUE)
LH_prod_f <- cbind(LH_prod_f, FPL)
colnames(LH_prod_f)[which(names(LH_prod_f) == "FPL")] <- FPL_name
}
for (x in UProd_Sp){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_spring, fixed=TRUE)
LH_prod_sp <- cbind(LH_prod_sp, FPL)
colnames(LH_prod_sp)[which(names(LH_prod_sp) == "FPL")] <- FPL_name
}
for (x in UProd_Su){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_summer, fixed=TRUE)
LH_prod_su <- cbind(LH_prod_su, FPL)
colnames(LH_prod_su)[which(names(LH_prod_su) == "FPL")] <- FPL_name
}
for (x in UProd_W){
FPL_name = gettext(x)
FPL <- grepl(x, LH_data$Prod_winter, fixed=TRUE)
LH_prod_w <- cbind(LH_prod_w, FPL)
colnames(LH_prod_w)[which(names(LH_prod_w) == "FPL")] <- FPL_name
}
## convert logical columns to numeric
### Base
cols <- sapply(LH_data, is.logical)
LH_data[,cols] <- lapply(LH_data[,cols], as.numeric)
### Fall
f_cols <- sapply(LH_prod_f, is.logical)
LH_prod_f[,f_cols] <- lapply(LH_prod_f[,f_cols], as.numeric)
### Spring
sp_cols <- sapply(LH_prod_sp, is.logical)
LH_prod_sp[,sp_cols] <- lapply(LH_prod_sp[,sp_cols], as.numeric)
### Summer
su_cols <- sapply(LH_prod_su, is.logical)
LH_prod_su[,su_cols] <- lapply(LH_prod_su[,su_cols], as.numeric)
### Winter
w_cols <- sapply(LH_prod_w, is.logical)
LH_prod_w[,w_cols] <- lapply(LH_prod_w[,w_cols], as.numeric)
LH_prod <- rbind(LH_prod_f, LH_prod_w, LH_prod_sp, LH_prod_su)
write.csv(LH_prod, "LH_prod.csv")
# sort into summary dataframes
## summarize farm and membership by state
LH_state <- LH_data %>%
group_by(State)%>%
summarise_at(vars(farm_count, Naturally_grown, GAP_cert, Cert_organic, Cert_natgrown, IPM, ROP_cert, Demeter_cert, animal_welfare, grass_fed, conventional, transitional, kosher, halaal), list(sum=sum)) %>%
filter(State %in% states48)
# sort into summary dataframes
## summarize farm and membership by state
LH_state <- LH_data %>%
group_by(State)%>%
summarise_at(vars(farm_count, Naturally_grown, GAP_cert, Cert_organic, Cert_natgrown, IPM, ROP_cert, Demeter_cert, animal_welfare, grass_fed, conventional, transitional, kosher, halaal), list(sum=sum)) %>%
filter(State %in% states48)
LH_prod <- LH_prod %>% mutate(`Product Diversity` = select(., almonds:zucchini)
%>% rowSums(na.rm = TRUE))
View(LH_prod)
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse); require(showtext); require(scico); require(pwr); require(ggpubr); require(ggspatial); require(sf); require(ggthemes); require(tigris)
options(tigris_use_cache=TRUE)
runApp('GitHub/Portfolio/FamilyFarmsState')
# load data
LH_state_file <- "C:/Users/zachp/OneDrive/Documents/GitHub/Portfolio/Data/LH_state.shp"
LH_state <- st_read(LH_state_file)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='zachpeagler',
token='DAD78551536B56288243FE9A924170B2',
secret='<SECRET>')
rsconnect::setAccountInfo(name='zachpeagler', token='DAD78551536B56288243FE9A924170B2', secret='Q3Qb/6S2z8NOHwmngRdLMtsjN+OB1v/KuKtRhU4P')
library(rsconnect)
# load data
LH_state_file <- "https://github.com/zachpeagler/Portfolio/blob/8c4da20dd5a8f5ef040dfc9be636d31148ced595/US%20State%20Family%20Farm%20Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
runApp('GitHub/Portfolio/US State Family Farm Products')
rsconnect::deployApp('C:/Users/zachp/OneDrive/Documents/GitHub/Portfolio/US State Family Farm Products/app.R')
# load data
LH_state_file <- "http://cdn.jsdelivr.net/gh/zachpeagler/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
# load data
LH_state_file <- "https://zachpeagler.github.io/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
# load data
LH_state_file <- "/viscurl/https://zachpeagler.github.io/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
install.packages("RCurl")
library(RCurl)
# load data
LH_state_file <- "/https://zachpeagler.github.io/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
# load data
LH_state_file <- "https://zachpeagler.github.io/LH_state.shp"
LH_state <- st_read(LH_state_file)
# load data
LH_state_file <- "https://zachpeagler.github.io/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
# load data
LH_state_file <- "/https://zachpeagler.github.io/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
# load data
LH_state_file <- "/vsicurl/https://zachpeagler.github.io/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
# load data
LH_state_file <- "C:/Users/zachp/OneDrive/Documents/GitHub/Portfolio/US State Family Farm Products/LH_state.shp"
LH_state <- st_read(LH_state_file)
runApp('GitHub/Portfolio/US State Family Farm Products')
library(rsconnect)
rsconnect::deployApp('C:/Users/zachp/OneDrive/Documents/GitHub/Portfolio/US State Family Farm Products/app.R')
library(rsconnect)
rsconnect::deployApp('C:/Users/zachp/OneDrive/Documents/GitHub/Portfolio/US State Family Farm Products')
library(rsconnect)
rsconnect::deployApp('C:/Github/Portfolio/US State Family Farm Products')
library(rsconnect)
rsconnect::deployApp('C:/Github/Portfolio/US State Family Farm Products')
library(rsconnect)
rsconnect::deployApp('C:/Github/Portfolio/US State Family Farm Products')
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Crop Producers')
library(bslib)
bs_themes <- bootswatch_themes()
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
bs_themes <- bootswatch_themes()
tail(bs_themes)
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
# load data
## li600 data
Li_data_file <- "TIP24_LI600.csv"
tfile <- "C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants/TIP24_LI600.csv"
Li_data <- read.csv(tfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
Row==1~"Control",
Row==2~"Transplantation",
Row==3~"Germination",
Row==4~"Germ+Trans",
TRUE~NA)) %>%
# filter to leak% < 10 and gsw > 0
filter(leak_pct<10, gsw>0) %>%
mutate(Date = parse_date_time(Date, orders = "mdy"),
plant_fac = as.factor(paste(Row, Pot)),
Treatment = factor(Treatment, levels=c("Control", "Germination",
"Transplantation", "Germ+Trans"))
)
Li_data <- Li_data[,c("Obs.", "Time", "Date", "Row", "Pot", "gsw", "VPDleaf", "PhiPS2", "rh_s", "Tleaf", "Qamb")]
## Fluorescence
### Exploratory
#### GSW
## gsw distributions
gsw_n <- fitdistr(Li_data$gsw, "normal")
gsw_ln <- fitdistr(Li_data$gsw, "lognormal")
gsw_g <- fitdistr(Li_data$gsw, "gamma")
gsw_seq <- seq(min(Li_data$gsw), max(Li_data$gsw), by=0.001)
### test gsw for gamma and plnorm distributions using ks test
gsw_gks <- ks.test(Li_data$gsw, "pgamma",shape=gsw_g$estimate[1],
rate=gsw_g$estimate[2])[2]
gsw_lnks <- ks.test(Li_data$gsw, "plnorm",meanlog=gsw_ln$estimate[1],
sdlog=gsw_ln$estimate[2])[2]
gsw_nks <- ks.test(Li_data$gsw, "pnorm",mean=gsw_n$estimate[1],
sd=gsw_n$estimate[2])[2]
View(gsw_gks)
### test gsw for gamma and plnorm distributions using ks test
gsw_gks <- gettext(ks.test(Li_data$gsw, "pgamma",shape=gsw_g$estimate[1],
rate=gsw_g$estimate[2])[2])
### test gsw for gamma and plnorm distributions using ks test
gsw_gks <- round(list2DF(ks.test(Li_data$gsw, "pgamma",shape=gsw_g$estimate[1],
rate=gsw_g$estimate[2])[2]), 2)
View(gsw_gks)
### test gsw for gamma and plnorm distributions using ks test
gsw_gks <- round(list2DF(ks.test(Li_data$gsw, "pgamma",shape=gsw_g$estimate[1],
rate=gsw_g$estimate[2])[2]), 2)[1,1]
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
## PhiPS2 distribution
PhiPS2_n <- fitdistr(Li_data$PhiPS2, "normal")
PhiPS2_ln <- fitdistr(Li_data$PhiPS2, "lognormal")
PhiPS2_g <- fitdistr(Li_data$PhiPS2, "gamma")
PhiPS2_seq <- seq(min(Li_data$PhiPS2), max(Li_data$PhiPS2), by=0.001)
### test gsw for gamma and plnorm distributions using ks test
phi_gks <- round(list2DF(ks.test(Li_data$PhiPS2, "pgamma",shape=PhiPS2_g$estimate[1],
rate=PhiPS2_g$estimate[2])[2]), 3)[1,1]
ks.test(Li_data$PhiPS2, "pgamma",shape=PhiPS2_g$estimate[1],
rate=PhiPS2_g$estimate[2])
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse); require(lmerTest); require(showtext); require(scico); require(pwr); require(car); require(ggpubr); require(rstatix); require(ggridges); require(MASS)
#GLMM with Treatment as explanatory
summary(gsw_glmm <- (glmer(gsw ~ Treatment + rh_s + (1|plant_fac),
data=Li_data, family=Gamma(link="log"))))
Li_data <- read.csv(tfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
Row==1~"Control",
Row==2~"Transplantation",
Row==3~"Germination",
Row==4~"Germ+Trans",
TRUE~NA)) %>%
# filter to leak% < 10 and gsw > 0
filter(leak_pct<10, gsw>0) %>%
mutate(Date = parse_date_time(Date, orders = "mdy"),
plant_fac = as.factor(paste(Row, Pot)),
Treatment = factor(Treatment, levels=c("Control", "Germination",
"Transplantation", "Germ+Trans"))
)
Li_data <- Li_data[,c("Obs.", "Treatment", "Time", "Date", "Row", "Pot", "gsw", "VPDleaf", "PhiPS2", "rh_s", "Tleaf", "Qamb")]
#GLMM with Treatment as explanatory
summary(gsw_glmm <- (glmer(gsw ~ Treatment + rh_s + (1|plant_fac),
data=Li_data, family=Gamma(link="log"))))
Li_data <- read.csv(tfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
Row==1~"Control",
Row==2~"Transplantation",
Row==3~"Germination",
Row==4~"Germ+Trans",
TRUE~NA)) %>%
# filter to leak% < 10 and gsw > 0
filter(leak_pct<10, gsw>0) %>%
mutate(Date = parse_date_time(Date, orders = "mdy"),
plant_fac = as.factor(paste(Row, Pot)),
Treatment = factor(Treatment, levels=c("Control", "Germination",
"Transplantation", "Germ+Trans"))
)
Li_data <- Li_data[,c("Obs.", "Treatment", "Time", "Date", "Row", "Pot", "plant_fac", "gsw", "VPDleaf", "PhiPS2", "rh_s", "Tleaf", "Qamb")]
#GLMM with Treatment as explanatory
summary(gsw_glmm <- (glmer(gsw ~ Treatment + rh_s + (1|plant_fac),
data=Li_data, family=Gamma(link="log"))))
View(gsw_glmm)
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
tfruitfile <- "C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants/TIP24_Fruit.csv"
Fl_data <- read.csv(tfruitfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
row==1~"Control",
row==2~"Transplantation",
row==3~"Germination",
row==4~"Germ+Trans",
TRUE~NA),
fruit = 1,
date_analysis = parse_date_time(date_analysis, orders = "mdy"),
date_harvest = parse_date_time(date_harvest, orders="mdy"),
d_harvest = format(date_harvest, format="%d"),
d_analysis = format(date_analysis, format="%d"),
d_diff = abs(as.integer(d_analysis)-as.integer(d_harvest)),
plant_fac = as.factor(paste(row, plant)),
Treatment = factor(Treatment, levels=c("Control","Germination",
"Transplantation",
"Germ+Trans")),
BER = as.factor(BER),
fungus = as.factor(fungus),
cracking = as.factor(cracking),
ripeness = abs(1-(penetrometer/max(na.omit(penetrometer))))
)
library(tidyverse)
tfruitfile <- "C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants/TIP24_Fruit.csv"
Fl_data <- read.csv(tfruitfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
row==1~"Control",
row==2~"Transplantation",
row==3~"Germination",
row==4~"Germ+Trans",
TRUE~NA),
fruit = 1,
date_analysis = parse_date_time(date_analysis, orders = "mdy"),
date_harvest = parse_date_time(date_harvest, orders="mdy"),
d_harvest = format(date_harvest, format="%d"),
d_analysis = format(date_analysis, format="%d"),
d_diff = abs(as.integer(d_analysis)-as.integer(d_harvest)),
plant_fac = as.factor(paste(row, plant)),
Treatment = factor(Treatment, levels=c("Control","Germination",
"Transplantation",
"Germ+Trans")),
BER = as.factor(BER),
fungus = as.factor(fungus),
cracking = as.factor(cracking),
ripeness = abs(1-(penetrometer/max(na.omit(penetrometer))))
)
View(Fl_data)
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
tfile <- "C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants/TIP24_LI600.csv"
Li_data <- read.csv(tfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
Row==1~"Control",
Row==2~"Transplantation",
Row==3~"Germination",
Row==4~"Germ+Trans",
TRUE~NA)) %>%
# filter to leak% < 10 and gsw > 0
filter(leak_pct<10, gsw > 0) %>%
mutate(Date = parse_date_time(Date, orders = "mdy"),
plant_fac = as.factor(paste(Row, Pot)),
Treatment = factor(Treatment, levels=c("Control", "Germination",
"Transplantation", "Germ+Trans"))
)
Li_data <- Li_data[,c("Obs.", "Treatment", "Time", "Date", "Row", "Pot", "plant_fac", "gsw", "VPDleaf", "PhiPS2", "rh_s", "Tleaf", "Qamb")]
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse); require(lmerTest); require(RColorBrewer); require(hrbrthemes); require(viridis); require(showtext); require(scico); require(pwr)
nl_dat <- file.choose()
nl_dat_file <- file.choose()
nl_dat <- read.csv(nl_dat_file)
View(nl_dat)
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()+
scale_color_scico_d(begin=1, end=0, palette="acton")
ggplot(nl_dat, aes(x=time, y=od, color=as.factor(treat)))+
geom_point()+
scale_color_scico_d(begin=1, end=0, palette="acton")
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()+
scale_color_manual(begin=1, end=0, palette="acton")
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_jitter()
nl_dat <- read.csv(nl_dat_file) %>%
mutate(treat = as.factor(treat))
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_jitter()
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
install.packages("drc")
## using drc
drm(od~Asym/(1+exp((xmid-time)/scal)),
curveid=treat, data=nl_dat)
library(drc)
## using drc
drm(od~time, curveid=treat, data=nl_dat, fct=LL.3)
## using drc
drm(od~time, curveid=treat, data=nl_dat, fct=LL.3())
## using drc
drm(od~time, curveid=treat, data=nl_dat, fct=W2.3())
## using drc
mod2 <- drm(od~time, curveid=treat, data=nl_dat, fct=W2.3())
summary(mod2)
confint(mod2)
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
??rdc
??drc
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
library(tidyverse)
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
## fruit data
Fl_data_file <- "TIP24_Fruit.csv"
Fl_data <- read.csv(Fl_data_file, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
row==1~"Control",
row==2~"Transplantation",
row==3~"Germination",
row==4~"Germ+Trans",
TRUE~NA),
fruit = 1,
date_analysis = parse_date_time(date_analysis, orders = "mdy"),
date_harvest = parse_date_time(date_harvest, orders="mdy"),
d_harvest = format(date_harvest, format="%d"),
d_analysis = format(date_analysis, format="%d"),
d_diff = abs(as.integer(d_analysis)-as.integer(d_harvest)),
plant_fac = as.factor(paste(row, plant)),
Treatment = factor(Treatment, levels=c("Control","Germination",
"Transplantation",
"Germ+Trans")),
BER = as.factor(BER),
fungus = as.factor(fungus),
cracking = as.factor(cracking),
ripeness = abs(1-(penetrometer/max(na.omit(penetrometer))))
)
## fruit data
Fl_data_file <- "TIP24_Fruit.csv"
Fl_data <- read.csv(Fl_data_file, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
row==1~"Control",
row==2~"Transplantation",
row==3~"Germination",
row==4~"Germ+Trans",
TRUE~NA),
fruit = 1,
date_analysis = parse_date_time(date_analysis, orders = "mdy"),
date_harvest = parse_date_time(date_harvest, orders="mdy"),
d_harvest = format(date_harvest, format="%d"),
d_analysis = format(date_analysis, format="%d"),
d_diff = abs(as.integer(d_analysis)-as.integer(d_harvest)),
plant_fac = as.factor(paste(row, plant)),
Treatment = factor(Treatment, levels=c("Control","Germination",
"Transplantation",
"Germ+Trans")),
BER = as.factor(BER),
fungus = as.factor(fungus),
cracking = as.factor(cracking),
ripeness = abs(1-(penetrometer/max(na.omit(penetrometer))))
)
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')

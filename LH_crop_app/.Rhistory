mutate(
farm_count = 1,
Date_ref = Last_updated,
Last_updated = gsub('-', '/', Last_updated),
Last_updated = parse_date(Last_updated, format="%d/%b/%y"))
## add membership columns
LH_data <- LH_data %>%
mutate(
Naturally_grown = grepl("naturally grown", LH_data$Farming_practices),
GAP_cert = grepl("GAP", LH_data$Farming_practices),
Cert_organic = grepl("Certified Organic", LH_data$Farming_practices),
Cert_natgrown = grepl("Certified Naturally Grown", LH_data$Farming_practices),
IPM = grepl("integrated pest management", LH_data$Farming_practices),
ROP_cert = grepl("Demeter Certified", LH_data$Farming_practices),
Demeter_cert = grepl("Real Organic Project", LH_data$Farming_practices),
animal_welfare = grepl("animal welfare", LH_data$Farming_practices),
grass_fed = grepl("grass fed", LH_data$Farming_practices),
conventional = grepl("conventional", LH_data$Farming_practices),
transitional = grepl("transitional", LH_data$Farming_practices),
kosher = grepl("kosher", LH_data$Farming_practices),
halaal = grepl("halaal", LH_data$Farming_practices)
)
## split location then add it back to the df as "City" and "State"
loc <- as.data.frame(LH_data$Farm_location)
names(loc)[names(loc) == 'LH_data$Farm_location'] <- 'loc'
loc$loc <- strsplit(loc$loc, ',')
loc <- unnest_wider(loc, 1, names_sep = '')
loc$loc1 <- trimws(loc$loc1)
loc$loc2 <- trimws(loc$loc2)
LH_data$City <- loc$loc1
LH_data$State <- loc$loc2
# make a custom function for removing all special characters from a string i royally boned how i put it into the csv
debone = function(x){
gsub('[^[:alnum:]]', '', x)
}
# Prod Winter
## extract the winter products and separate strings by commas
Prod_winter = sapply(LH_data$Prod_winter, strsplit, ",")
## convert it from a list into a dataframe (if we gsub without doing this it turns into word soup)
Prod_winter = data.frame(matrix(unlist(Prod_winter)))
## rename the column containing the items to 'item'
names(Prod_winter)[names(Prod_winter) == 'matrix.unlist.Prod_winter..'] <- 'item'
## remove extraneous characters
Prod_winter$item = apply(Prod_winter, 1, debone)
## remove duplicate items
UProd_W <- sort(unique(Prod_winter$item))
## remove blanks
UProd_W <- keep(UProd_W, UProd_W>0)
# Prod Spring
## extract the spring products and separate strings by commas
Prod_spring = sapply(LH_data$Prod_spring, strsplit, ",")
## convert it from a list into a dataframe (if we gsub without doing this it turns into word soup)
Prod_spring = data.frame(matrix(unlist(Prod_spring)))
## rename the column containing the items to 'item'
names(Prod_spring)[names(Prod_spring) == 'matrix.unlist.Prod_spring..'] <- 'item'
## remove extraneous characters
Prod_spring$item = apply(Prod_spring, 1, debone)
## remove duplicate items
UProd_Sp <- sort(unique(Prod_spring$item))
## remove blanks
UProd_Sp <- keep(UProd_Sp, UProd_Sp>0)
# Prod Summer
## extract the summer products and separate strings by commas
Prod_summer = sapply(LH_data$Prod_summer, strsplit, ",")
## convert it from a list into a dataframe (if we gsub without doing this it turns into word soup)
Prod_summer = data.frame(matrix(unlist(Prod_summer)))
## rename the column containing the items to 'item'
names(Prod_summer)[names(Prod_summer) == 'matrix.unlist.Prod_summer..'] <- 'item'
## remove extraneous characters
Prod_summer$item = apply(Prod_summer, 1, debone)
## remove duplicate items
UProd_Su <- sort(unique(Prod_summer$item))
## remove blanks
UProd_Su <- keep(UProd_Su, UProd_Su>0)
# Prod Fall
## extract the fall products and separate strings by commas
Prod_fall = sapply(LH_data$Prod_fall, strsplit, ",")
## convert it from a list into a dataframe (if we gsub without doing this it turns into word soup)
Prod_fall = data.frame(matrix(unlist(Prod_fall)))
## rename the column containing the items to 'item'
names(Prod_fall)[names(Prod_fall) == 'matrix.unlist.Prod_fall..'] <- 'item'
## remove extraneous characters
Prod_fall$item = apply(Prod_fall, 1, debone)
## remove duplicate items
UProd_F <- sort(unique(Prod_fall$item))
## remove blanks
UProd_F <- keep(UProd_F, UProd_F>0)
## find difference between summer and winter/fall (spring and summer are the same)
d_suw <- UProd_Su[!(UProd_Su %in% UProd_W)]
d_suf <- UProd_Su[!(UProd_Su %in% UProd_F)]
## append missing elements to season production lists
UProd_W <- append(UProd_W, d_suw)
UProd_W <- sort(UProd_W)
UProd_F <- append(UProd_F, d_suf)
UProd_F <- sort(UProd_F)
## make dataframes to add to for each season
LH_names <- as.data.frame(LH_data[,c(1, 34,35)])
colnames(LH_names)[1] <- "Farm Name"
LH_names$ID <- paste(LH_names$City, LH_names$State, sep=",")
LH_prod_f <- LH_names
LH_prod_sp <- LH_names
LH_prod_su <- LH_names
LH_prod_w <- LH_names
LH_prod <- cbind(LH_prod_f, LH_prod_w[,5:213], LH_prod_sp[,5:213], LH_prod_su[,5:213])
## iterate through our product lists and check if a farm is producing that item in that season
for (x in UProd_F){
FPL_name = paste("F", gettext(x), sep="_")
FPL <- grepl(x, LH_data$Prod_fall, fixed=TRUE)
LH_prod_f <- cbind(LH_prod_f, FPL)
colnames(LH_prod_f)[which(names(LH_prod_f) == "FPL")] <- FPL_name
}
for (x in UProd_Sp){
FPL_name = paste("Sp", gettext(x), sep="_")
FPL <- grepl(x, LH_data$Prod_spring, fixed=TRUE)
LH_prod_sp <- cbind(LH_prod_sp, FPL)
colnames(LH_prod_sp)[which(names(LH_prod_sp) == "FPL")] <- FPL_name
}
for (x in UProd_Su){
FPL_name = paste("Su", gettext(x), sep="_")
FPL <- grepl(x, LH_data$Prod_summer, fixed=TRUE)
LH_prod_su <- cbind(LH_prod_su, FPL)
colnames(LH_prod_su)[which(names(LH_prod_su) == "FPL")] <- FPL_name
}
for (x in UProd_W){
FPL_name = paste("W", gettext(x), sep="_")
FPL <- grepl(x, LH_data$Prod_winter, fixed=TRUE)
LH_prod_w <- cbind(LH_prod_w, FPL)
colnames(LH_prod_w)[which(names(LH_prod_w) == "FPL")] <- FPL_name
}
## convert logical columns to numeric
### Base
cols <- sapply(LH_data, is.logical)
LH_data[,cols] <- lapply(LH_data[,cols], as.numeric)
### Fall
f_cols <- sapply(LH_prod_f, is.logical)
LH_prod_f[,f_cols] <- lapply(LH_prod_f[,f_cols], as.numeric)
### Spring
sp_cols <- sapply(LH_prod_sp, is.logical)
LH_prod_sp[,sp_cols] <- lapply(LH_prod_sp[,sp_cols], as.numeric)
### Summer
su_cols <- sapply(LH_prod_su, is.logical)
LH_prod_su[,su_cols] <- lapply(LH_prod_su[,su_cols], as.numeric)
### Winter
w_cols <- sapply(LH_prod_w, is.logical)
LH_prod_w[,w_cols] <- lapply(LH_prod_w[,w_cols], as.numeric)
### not working for some reason. it was working earlier.
### add a column for product diversity
LH_prod_f <- LH_prod_f %>%
mutate(`Product Diversity` =select(F_almonds:F_zucchini) %>% rowSums(na.rm=TRUE))
LH_prod <- cbind(LH_prod_f, LH_prod_w[,5:213], LH_prod_sp[,5:213], LH_prod_su[,5:213])
# sort into summary dataframes
## summarize farm and membership by state
LH_state <- LH_data %>%
group_by(State)%>%
summarise_at(vars(farm_count, Naturally_grown, GAP_cert, Cert_organic, Cert_natgrown, IPM, ROP_cert, Demeter_cert, animal_welfare, grass_fed, conventional, transitional, kosher, halaal), list(sum=sum)) %>%
filter(State %in% states52)
# Combine map data with state membership data
usa52_memberships <- cbind(usa52, LH_state[2:15]) %>%
mutate(p_NG = round(Naturally_grown_sum/farm_count_sum * 100, 0),
p_GAP = round(GAP_cert_sum/farm_count_sum* 100, 0),
p_CO = round(Cert_organic_sum/farm_count_sum* 100, 0),
p_CNG = round(Cert_natgrown_sum/farm_count_sum* 100, 0),
p_IPM = round(IPM_sum/farm_count_sum* 100, 0),
p_ROP = round(ROP_cert_sum/farm_count_sum* 100, 0),
p_DC = round(Demeter_cert_sum/farm_count_sum* 100, 0),
p_AWCF = round(animal_welfare_sum/farm_count_sum* 100, 0),
p_GF = round(grass_fed_sum/farm_count_sum* 100, 0),
p_con = round(conventional_sum/farm_count_sum* 100, 0),
p_tra = round(transitional_sum/farm_count_sum* 100, 0),
p_kosh = round(kosher_sum/farm_count_sum* 100, 0),
p_hal = round(halaal_sum/farm_count_sum* 100, 0),
) %>%
rename("Farms" = farm_count_sum,
"Naturally Grown" = Naturally_grown_sum,
"GAP Certified" = GAP_cert_sum,
"Certified Organic" = Cert_organic_sum,
"Certified Naturally Grown" = Cert_natgrown_sum,
"Integrated Pest Management" = IPM_sum,
"ROP Certified" = ROP_cert_sum,
"Demeter Certified" = Demeter_cert_sum,
"Animal Welfare/Cruelty Free" = animal_welfare_sum,
"Grass Fed/Free Range" = grass_fed_sum,
"Conventional" = conventional_sum,
"Transitional" = transitional_sum,
"Kosher" = kosher_sum,
"Halaal" = halaal_sum
)
usa48_membership <- usa52_memberships %>%
filter(NAME!="American Samoa",
NAME!="Guam",
NAME!="Commonwealth of the Northern Mariana Islands",
NAME!="United States Virgin Islands",
NAME!="Puerto Rico",
NAME!="Hawaii",
NAME!="Alaska",
NAME!="District of Columbia")
# make future labeling easier
## create list of problem states
move_labels <- c("Connecticut", "Delaware", "District of Columbia",
"Maryland", "Massachusetts", "New Hampshire", "New Jersey",
"Rhode Island", "Vermont")
## subset states and assign offset values for labels and segments
move_states <- usa52_memberships %>%
filter(NAME %in% move_labels) %>%
arrange(lat) %>%
mutate(xend = 2.2e6,
yend = seq(min(lat)-4e5, max(lat)+1e5, length.out = n()))
## subset states (w/o DC, HI, AK, or PR) and assign offset values for labels and segments
move_states48 <- usa48_membership %>%
filter(NAME %in% move_labels) %>%
arrange(lat) %>%
mutate(xend = 2.2e6,
yend = seq(min(lat)-4e5, max(lat)+1e5, length.out = n()))
# summarize crop diversity by state
### fall
cd_state_f <- LH_prod_f %>%
group_by(State) %>%
summarise_at(vars(`Product Diversity`), list(mean=mean, median=median, sd=sd)) %>%
filter(State %in% states52) %>%
mutate(Season="Fall")
# summarize individual crops by state
### make temporary state and season dataframes (not the best way, but easy)
s_df <- as.data.frame("State")
se_df <- as.data.frame("Season")
# make fall individual crop production dataframe
ic_52states_f <- LH_prod_f %>%
group_by(State) %>%
summarise_at(vars(colnames(LH_prod_f[,5:213])), list(sum=sum)) %>%
mutate(Season = "Fall") %>%
filter(State %in% states52)
### extract crop names
f_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_52states_f[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
f_crop_names <- cbind(s_df, f_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_52states_f) <- f_crop_names
### combine with geographical data
ic_52states_f <- cbind(usa52, ic_52states_f)
st_geometry(ic_52states_f) <- "geometry"
# make winter individual crop production dataframe
ic_52states_w <- LH_prod_w %>%
group_by(State) %>%
summarise_at(vars(colnames(LH_prod_w[,5:213])), list(sum=sum)) %>%
mutate(Season = "Winter") %>%
filter(State %in% states52)
### extract crop names
w_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_52states_w[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
w_crop_names <- cbind(s_df, w_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_52states_w) <- w_crop_names
### combine with geographical data
ic_52states_w <- cbind(usa52, ic_52states_w)
st_geometry(ic_52states_w) <- "geometry"
# make spring individual crop production dataframe
ic_52states_sp <- LH_prod_sp %>%
group_by(State) %>%
summarise_at(vars(colnames(LH_prod_sp[,5:213])), list(sum=sum)) %>%
mutate(Season = "Spring") %>%
filter(State %in% states52)
### extract crop names
sp_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_52states_sp[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
sp_crop_names <- cbind(s_df, sp_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_52states_sp) <- sp_crop_names
### combine with geographical data
ic_52states_sp <- cbind(usa52, ic_52states_sp)
st_geometry(ic_52states_sp) <- "geometry"
# make summer individual crop production dataframe
ic_52states_su <- LH_prod_su %>%
group_by(State) %>%
summarise_at(vars(colnames(LH_prod_su[,5:213])), list(sum=sum)) %>%
mutate(Season = "Summer") %>%
filter(State %in% states52)
### extract crop names
su_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_52states_su[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
su_crop_names <- cbind(s_df, su_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_52states_su) <- su_crop_names
### combine with geographical data
ic_52states_su <- cbind(usa52, ic_52states_su)
st_geometry(ic_52states_su) <- "geometry"
### combine
ic_52states <- rbind(ic_52states_f, ic_52states_sp, ic_52states_su, ic_52states_w) %>%
mutate(Season = factor(Season, levels = c("Spring", "Summer", "Fall", "Winter")))
### cut it down to 48
ic_48states <- ic_52states %>%
filter(NAME!="Puerto Rico",
NAME!="Hawaii",
NAME!="Alaska",
NAME!="District of Columbia")
View(ic_48states)
write_csv(ic_48states, file="LH_crops_tigris")
> write_csv(ic_48states, file="LH_state_crops")
> write_csv(ic_48states, file="LH_state_crops")
> write_csv(ic_48states, file="LH_state_crops")
write_csv(ic_48states, file="LH_state_crops")
# summarize LH_data and production data by city
## Summarize data by city and state
LH_city <- LH_data %>%
group_by(City, State) %>%
summarise_at(vars(farm_count, Naturally_grown, GAP_cert, Cert_organic, Cert_natgrown, IPM, ROP_cert, Demeter_cert, animal_welfare, grass_fed, conventional, transitional, kosher, halaal), list(sum=sum))
# Add an ID made out of city + state
LH_city$ID <- paste(LH_city$City, LH_city$State, sep=",")
## trim cities to only those in 'cities' object
LH_city <- LH_city %>%
filter(ID %in% cities_cont$ID)
## trim cities to only those in 'cities' object
LH_city <- LH_city %>%
filter(ID %in% cities_cont$ID)
# trim 'cities' object to match the length of LH_data
tcities <- cities_cont %>%
filter(ID %in% LH_city$ID)
tcities <- tcities[!duplicated(tcities$ID),]
tcities <- tcities[order(tcities$ID),]
city_memberships <- cbind(tcities, LH_city[,c(3:16)]) %>%
mutate(p_NG = round(Naturally_grown_sum/farm_count_sum * 100, 0),
p_GAP = round(GAP_cert_sum/farm_count_sum* 100, 0),
p_CO = round(Cert_organic_sum/farm_count_sum* 100, 0),
p_CNG = round(Cert_natgrown_sum/farm_count_sum* 100, 0),
p_IPM = round(IPM_sum/farm_count_sum* 100, 0),
p_ROP = round(ROP_cert_sum/farm_count_sum* 100, 0),
p_DC = round(Demeter_cert_sum/farm_count_sum* 100, 0),
p_AWCF = round(animal_welfare_sum/farm_count_sum* 100, 0),
p_GF = round(grass_fed_sum/farm_count_sum* 100, 0),
p_con = round(conventional_sum/farm_count_sum* 100, 0),
p_tra = round(transitional_sum/farm_count_sum* 100, 0),
p_kosh = round(kosher_sum/farm_count_sum* 100, 0),
p_hal = round(halaal_sum/farm_count_sum* 100, 0)
) %>%
rename("Farms" = farm_count_sum,
"Naturally Grown" = Naturally_grown_sum,
"GAP Certified" = GAP_cert_sum,
"Certified Organic" = Cert_organic_sum,
"Certified Naturally Grown" = Cert_natgrown_sum,
"Integrated Pest Management" = IPM_sum,
"ROP Certified" = ROP_cert_sum,
"Demeter Certified" = Demeter_cert_sum,
"Animal Welfare/Cruelty Free" = animal_welfare_sum,
"Grass Fed/Free Range" = grass_fed_sum,
"Conventional" = conventional_sum,
"Transitional" = transitional_sum,
"Kosher" = kosher_sum,
"Halaal" = halaal_sum
)
# summarize crop diversity by city
### fall
cd_city_f <- LH_prod_f %>%
group_by(ID) %>%
summarise_at(vars(`Product Diversity`), list(mean=mean, median=median, sd=sd)) %>%
filter(ID %in% cities_cont$ID) %>%
mutate(Season="Fall")
# summarize individual crops by city
### make temporary state and season dataframes (not the best way, but easy)
id_df <- as.data.frame("ID")
# make fall individual crop production dataframe
ic_city_f <- LH_prod_f %>%
group_by(ID) %>%
summarise_at(vars(colnames(LH_prod_f[,5:213])), list(sum=sum)) %>%
mutate(Season = "Fall") %>%
filter(ID %in% cities_cont$ID)
# make fall individual crop production dataframe
ic_city_f <- LH_prod_f %>%
group_by(ID) %>%
summarise_at(vars(colnames(LH_prod_f[,5:213])), list(sum=sum)) %>%
mutate(Season = "Fall") %>%
filter(ID %in% cities_cont$ID)
### extract crop names
f_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_city_f[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
f_crop_names <- cbind(id_df, f_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_city_f) <- f_crop_names
### combine with geographical data
ic_city_f <- cbind(tcities, ic_city_f)
st_geometry(ic_city_f) <- "geometry"
# make winter individual crop production dataframe
ic_city_w <- LH_prod_w %>%
group_by(ID) %>%
summarise_at(vars(colnames(LH_prod_w[,5:213])), list(sum=sum)) %>%
mutate(Season = "Winter") %>%
filter(ID %in% cities_cont$ID)
### extract crop names
w_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_city_w[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
w_crop_names <- cbind(id_df, w_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_city_w) <- w_crop_names
### combine with geographical data
ic_city_w <- cbind(tcities, ic_city_w)
st_geometry(ic_city_w) <- "geometry"
# make spring individual crop production dataframe
ic_city_sp <- LH_prod_sp %>%
group_by(ID) %>%
summarise_at(vars(colnames(LH_prod_sp[,5:213])), list(sum=sum)) %>%
mutate(Season = "Spring") %>%
filter(ID %in% cities_cont$ID)
### extract crop names
sp_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_city_sp[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
sp_crop_names <- cbind(id_df, sp_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_city_sp) <- sp_crop_names
### combine with geographical data
ic_city_sp <- cbind(tcities, ic_city_sp)
st_geometry(ic_city_sp) <- "geometry"
# make summer individual crop production dataframe
ic_city_su <- LH_prod_su %>%
group_by(ID) %>%
summarise_at(vars(colnames(LH_prod_su[,5:213])), list(sum=sum)) %>%
mutate(Season = "Summer") %>%
filter(ID %in% cities_cont$ID)
### extract crop names
su_crop_names <- unnest_wider(as.data.frame(strsplit(colnames(ic_city_su[,2:210]), "_")), names_sep = " ", col=3)[2,]
### combine crop names with temp dfs we made earlier
su_crop_names <- cbind(id_df, su_crop_names, se_df)
### set colnames to our new crop name list
colnames(ic_city_su) <- su_crop_names
### combine with geographical data
ic_city_su <- cbind(tcities, ic_city_su)
st_geometry(ic_city_su) <- "geometry"
### combine
ic_city <- rbind(ic_city_f, ic_city_sp, ic_city_su, ic_city_w) %>%
mutate(Season = factor(Season, levels = c("Spring", "Summer", "Fall", "Winter")))
write_csv(ic_city, file="LH_crops_cities")
write_csv(ic_city, file="LH_crops_cities.csv")
write_csv(ic_48states, file="LH_crops_states.csv")
# load data
LH_crops_state_csv <- "C:/Users/zachp/Documents/GitHub/Portfolio/Data/LH_crops_states.csv"
LH_crops_state <- read.csv(LH_crops_state_csv)
# load data
LH_crops_state_csv <- "C:/Users/zachp/OneDrive/Documents/GitHub/Portfolio/Data/LH_crops_states.csv"
LH_crops_state <- read.csv(LH_crops_state_csv)
library(shiny)
library(tidyverse)
library(scico)
library(tigris)
# load data
LH_crops_state_csv <- "C:/Users/zachp/OneDrive/Documents/GitHub/Portfolio/Data/LH_crops_states.csv"
LH_crops_state <- read.csv(LH_crops_state_csv)
LH_crops_state <- read.csv(LH_crops_state_csv)
p_palettes <- scico_palette_names()
a_palette <- "lipari"
## it's a good idea to use n+1 for palettes as often the last color is white (invisible against the default background)
two_colors = scico(3, palette=a_palette)
four_colors = scico(5, palette=a_palette)
true_two_col = scico(2, palette=a_palette)
ten_col = scico(10, palette=a_palette)
font_add_google("Open Sans", family = "open")
font_add_google("Montserrat", family = "mont")
showtext_auto()
four_shapes = c(15,16,17,23)
# make future labeling easier
## create list of problem states
move_labels <- c("Connecticut", "Delaware", "District of Columbia",
"Maryland", "Massachusetts", "New Hampshire", "New Jersey",
"Rhode Island", "Vermont")
## subset states and assign offset values for labels and segments
move_states <- usa52_memberships %>%
filter(NAME %in% move_labels) %>%
arrange(lat) %>%
mutate(xend = 2.2e6,
yend = seq(min(lat)-4e5, max(lat)+1e5, length.out = n()))
## subset states and assign offset values for labels and segments
move_states <- LH_crops_state %>%
filter(NAME %in% move_labels) %>%
arrange(lat) %>%
mutate(xend = 2.2e6,
yend = seq(min(lat)-4e5, max(lat)+1e5, length.out = n()))
View(move_states)
View(LH_crops_state)
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms/app.R')
runApp('GitHub/Portfolio/USFamilyFarms/app.R')
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms')
crop <- "tomatos"
ic_52states %>%
ggplot(aes(fill=crop)) +
facet_wrap(~Season)+
geom_sf(color="black")+
scale_fill_scico(begin=1, end=0, palette=a_palette)+
guides(fill = guide_colorbar(title = crop))+
labs(title=paste("Sum of", crop, "Production by State", sep=" "),
subtitle="For family farms in the 50 US states plus DC and Puerto Rico",
caption="Data from localharvest.org (2024) and census.org (2022)",
tag=crop)+
coord_sf(clip = "off") +
theme_map() +
theme(legend.position = "inside",
legend.position.inside = c(1,.35),
legend.title.position = "top",
legend.title = element_text(size=20, family="open"),
strip.background = element_rect(fill=NA, color=NA),
text = element_text(size=24, family="mont"),
title = element_text(size=30, family="open", face="bold", lineheight = .5),
plot.subtitle = element_text(size=24, family="mont", face="italic", lineheight = .5),
plot.caption = element_text(size=20, family="mont", face="italic", lineheight = .5))
runApp('GitHub/Portfolio/USFamilyFarms')
p_palettes <- scico_palette_names()
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms')
runApp('GitHub/Portfolio/USFamilyFarms')
install.packages("plotly")
library(plotly)
runApp('GitHub/Portfolio/USFamilyFarms')

geom_jitter(width=0.1)+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Fruit Count")+
xlab("Treatment")+
theme_minimal()+
labs(
title="Tomato Plant Harvested Fruit Count Across Inoculation Treatments"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
Fl_avg_sums <- Fl_sum_byplant %>%
group_by(Treatment) %>%
summarize_at(vars(mass_sum), list(mean=mean, sd=sd))%>%
mutate(mean=mean/1000,
sd=sd/1000)
## mass per treatment columns with error bars
ggplot(data=Fl_avg_sums, aes(x=Treatment, y=mean, fill=Treatment))+
geom_col()+
geom_errorbar( aes(ymin=mean-sd, ymax=mean+sd), width=0.4)+
scale_fill_manual(values=four_colors)+
ylab("Total Mass (kg)")+
xlab("Treatment")+
theme_minimal()+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
#Kruskal-Wallis on mass as a function of Treatment
kruskal.test(mass ~ Treatment, data=Fl_data)
kruskal.test(mass_sum ~ Treatment, data=Fl_sum_byplant)
# Pairwise wilcox test on mass as a function of treatment
pairwise.wilcox.test(Fl_data$mass, Fl_data$Treatment)
pairwise.wilcox.test(Fl_sum_byplant$mass_sum, Fl_sum_byplant$Treatment)
mT_glm_s <- summary(mT_glm <- glm(mass~Treatment, data=Fl_data, family=Gamma(link="log")))
mT_glm_pseudoR2 <- (mT_glm_s$null.deviance - mT_glm_s$deviance)/mT_glm_s$null.deviance
summary(glm(mass_sum~Treatment, data=Fl_sum_byplant, family=Gamma(link="log")))
## plot of mass by treatment with box plots, violins, and jittered points
ggplot(data=Fl_data_no_BER, aes(x=Treatment, y=mass, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
stat_compare_means(label.x=3.25, label.y=425, size=8, family="mont")+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Tomato Mass (g)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title="Tomato Mass by Microbial Inoculation Timing"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## plot of mass mean per plant by treatment with box plots, violins, and jittered points
ggplot(data=Fl_means_byplant, aes(x=Treatment, y=mass_mean, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
stat_compare_means(label.x=3.25, size=8, family="mont")+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Tomato Mass (g)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title=str_wrap("Mean Tomato Mass by Plant across Microbial Inoculation Timing", 50)
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
# Linear mixed model of sugar as a function of treatment with plant as a random effect
summary(model_sugar_no_BER <- (lmer(
sugar_avg ~ Treatment + (1| plant_fac),
data = Fl_data_no_BER)))
# Linear mixed model of sugar as a function of treatment with plant as a random effect
#summary(model_sugar_no_BER <- (lmer(
#  sugar_avg ~ Treatment + (1| plant_fac),
#  data = Fl_data_no_BER)))
#summary(lm_sugar_no_BER <- (lm(
#  sugar_avg ~ Treatment,
#  data = Fl_data_no_BER)))
#TUKEY (more or less) on the LMER
difflsmeans(model_sugar_no_BER)
# Linear mixed model of sugar as a function of treatment with plant as a random effect
#summary(model_sugar_no_BER <- (lmer(
#  sugar_avg ~ Treatment + (1| plant_fac),
#  data = Fl_data_no_BER)))
#summary(lm_sugar_no_BER <- (lm(
#  sugar_avg ~ Treatment,
#  data = Fl_data_no_BER)))
#TUKEY (more or less) on the LMER
#difflsmeans(model_sugar_no_BER)
## plot sugar by treatment as a boxplot with violins and jitter
ggplot(data=Fl_data_no_BER, aes(x=Treatment, y=sugar_avg, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
stat_compare_means(label.x=3.5, label.y=11, size=8, family="mont")+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Sugar Concentration (%)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title=str_wrap("Tomato Sugar Concentration by Microbial Inoculation Timing", 40)
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
sugar_kw <- kruskal.test(sugar_avg_mean~Treatment, Fl_means_byplant)
## plot sugar means per plant by treatment as a boxplot with violins and jitter
ggplot(data=Fl_means_byplant, aes(x=Treatment, y=sugar_avg_mean, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
annotate("text", x=3.5, y=8.5, family="mont", label= paste("Kruskal-Wallis, p=", round(sugar_kw$p.value, 4)), size=8)+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Sugar Concentration (%)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title=str_wrap("Tomato Plant Sugar Concentration Mean by Microbial Inoculation Timing", 40)
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
# dependencies
library(shiny)
library(dplyr)
library(bslib)
library(scico)
dat <- iris
library(tidyverse)
vars <- colnames(iris)
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
palettes <- scico_palette_names()
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
shiny::runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
shiny::runApp('C:/Github/App-A-Day/01_meteorites')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
# Playing around with machine learning
# dependencies
library("ggplot2")
## diamonds
dimaonds <- data(diamonds)
## hyperLOPIT2015 mouse enzyme data
source("http://www.bioconductor.org/biocLite.R")
install.packages("mlbench")
library("mlbench")
## sonar
sonar <- data("Sonar")
## sonar
sonar <- data(Sonar)
View(Sonar)
library("MASS")
## boston
boston <- data(Boston)
View(Boston)
install.packages("modeldata")
library("modeldata")
## churn
churn <- data("mlc_churn")
View(mlc_churn)
churnTrain <- churn[1:3000, ]
## churn
churn <- data("mlc_churn")
churnTrain <- mlc_churn[1:3000, ]
churnTest <- mlc_churn[3001:5000, ]
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/02 US City Family Farm Products')
library(DT)
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
# load data
## deployment file
LH_state_file <- "lh_state_cleaned.csv"
## read data
LH_state <- read.csv(LH_state_file)
#dependencies
library(shiny)
runApp('C:/Github/Portfolio/R Shiny Apps/03 US State Family Farm Products')
shiny::runApp('C:/Github/Portfolio/Apps/tomato_inoculant_app')
sls8 <- c("#0d2b45", "#203c56", "#544e68", "#8d697a",
"#d08159", "#ffaa5e", "#ffd4a3", "#ffecd6")
runApp('C:/Github/Portfolio/Apps/tomato_inoculant_app')
# data
## iris flowers
iris <- data(iris)
# data
## iris flowers
iris <- data(iris)
# data
## iris flowers
iris <- data(iris)
# data
## iris flowers
iris <- data("iris")
data("iris")
force(iris)
View(iris)
# data
## iris flowers
iris <- data("iris")
# data
## iris flowers
iris <- data("iris")
# data
## iris flowers
data("iris")
# k means clustering
x <- iris$Sepal.Length
kmeans(x, centers = 3, nstart = 10)
cl <- kmeans(x, centers = 3, nstart = 10)
View(cl)
plot(x, col=cl$cluster)
nk <- c(1:5)
## dummy data frame
df <- data.frame()
df$clusters = i
df$TwithinSS <- cl$tot.withinss
## dummy data frame
df <- data.frame(matrix[1,0])
## dummy data frame
df <- data.frame(matrix[])
## dummy data frame
df <- data.frame(matrix)
## dummy data frame
df <- data.frame()
## dummy data frame
df <- data.frame(matrix(ncol=2, nrow=0))
clusters <- data.frame(matrix(ncol=2, nrow=0))
cl <- kmeans(x, centers = i, nstart = 10)
df$clusters = i
df$TwithinSS <- cl$tot.withinss
## dummy data frame
df <- data.frame()
df$TwithinSS <- cl$tot.withinss
## dummy data frame
clusters <- data.frame(matrix(ncol=2, nrow=0))
## for loop across clusters
for (i in nk){
cl <- kmeans(x, centers = i, nstart = 10)
df <- as.data.frame(i)
df$TwithinSS <- cl$tot.withinss
clusters <- rbind(clusters, df)
}
View(clusters)
plot(clusters$i, clusters$TwithinSS)
ggplot()+
geom_line(aes(clusters$i, clusters$TwithinSS))
View(iris)
# PCA
irispca <- prcomp(iris[, -5])
summary(irispca)
## plot
biplot(irispca)
## calculate variances and percent and cumulative variance along PCs
var <- irispca$sdev^2
pve <- var/sum(var)
cumsum(pve)
# kNN
set.seed(123)
tr <- sample(150, 50)
nw <- sample(150, 50)
library("class")
knnres <- knn(iris[tr, -5], iris[nw, -5], iris$Species[tr])
head(knnres)
summary(knnres)
# kNN
set.seed(123)
train <- sample(150, 50)
test <- sample(150, 50)
library("class")
knnres <- knn(iris[train, -5], iris[test, -5], iris$Species[train])
head(knnres)
table(knnres, iris$Species[test])
# kNN
set.seed(123)
train <- sample(150, 50)
test <- sample(150, 50)
library("class")
knnres <- knn(iris[train, -5], iris[test, -5], iris$Species[train])
head(knnres)
table(knnres, iris$Species[test])
# kNN
set.seed(124)
train <- sample(150, 50)
test <- sample(150, 50)
library("class")
knnres <- knn(iris[train, -5], iris[test, -5], iris$Species[train])
head(knnres)
table(knnres, iris$Species[test])
mean(knnres == iris$Species[test])
# kNN
args(knn)
## k represents the number of nearest neighbors to consider.
set.seed(123)
train <- sample(150, 50)
test <- sample(150, 50)
library("class")
knnres <- knn(iris[train, -5], iris[test, -5], iris$Species[train], prob = TRUE)
knnres <- knn(iris[train, -5], iris[test, -5], iris$Species[train], prob = TRUE)
## check knn results against actual values
table(knnres, iris$Species[test])
## model accuracy
mean(knnres == iris$Species[test])
## new model to see what the most accurate k is
nk <- c(1:5)
knnres
tempknn <- knn(iris[train, -5], iris[test, -5], iris$Species[train])
tempknn
knnTotal <- as.data.frame(1)
knnTotal <- as.data.frame(1) %>%
rename(k = "1")
# dependencies
library("dplyr")
knnTotal <- as.data.frame(1) %>%
rename(k = "1")
knnTotal$accuracy <- mean(knn1 == iris$Species[test])
## new model to see what the most accurate k is
### initialize knn Total df
knn1 <- knn(iris[train, -5], iris[test, -5], iris$Species[train], k = 1)
knnTotal$accuracy <- mean(knn1 == iris$Species[test])
for (i in nk) {
tempknn <- knn(iris[train, -5], iris[test, -5], iris$Species[train], k = i)
df <- as.data.frame(i)
df$accuracy <- mean(tempknn == iris$Species[test])
knnTotal <- rbind(knnTotal, df)
}
nk <- c(2:5)
for (i in nk) {
tempknn <- knn(iris[train, -5], iris[test, -5], iris$Species[train], k = i)
df <- as.data.frame(i) %>%
renames(k = "i")
df$accuracy <- mean(tempknn == iris$Species[test])
knnTotal <- rbind(knnTotal, df)
}
for (i in nk) {
tempknn <- knn(iris[train, -5], iris[test, -5], iris$Species[train], k = i)
df <- as.data.frame(i) %>%
rename(k = "i")
df$accuracy <- mean(tempknn == iris$Species[test])
knnTotal <- rbind(knnTotal, df)
}
View(knnTotal)
library("caret")
install.packages("caret")
library("caret")
data("diamonds")
mod1 <- lm(price ~ ., diamonds)
p <- predict(mod1, diamonds)
## Error on prediction
error <- p - diamonds$price
rmse_in <- sqrt(mean(error^2)) ## in-sample RMSE
mod2 <- lm(price ~ carat + cut + color + clarity, diamonds)
## random sample of 80% of diamond data
dtest <- sample(53940, (53940 * .8))
## random sample of 80% of diamond data
set.seed(123)
## random sample of 80% of diamond data
set.seed(123)
dtest <- sample(53940, (53940 * .8))
mod2 <- lm(price ~ carat + cut + color + clarity, diamonds[dtest,])
p2 <- predict(mod2, diamonds[-dtest, ])
error2 <- p2 - diamonds$price[-dtest, ]
error2 <- p2 - diamonds$price[-dtest]
rmse_out <- sqrt(mean(error^2))
## random sample of 80% of diamond data
set.seed(50)
rmse_out <- sqrt(mean(error2^2))
## random sample of 80% of diamond data
set.seed(50)
dtest <- nrow(diamonds) * .8
mod3 <- lm(price ~ carat, diamonds[dtest,])
p3 <- predict(mod3, diamonds[-dtest, ])
error3 <- p3 - diamonds$price[-dtest]
rmse3 <- sqrt(mean(error3^2))
# cross-validation
set.seed(123)
mod4 <- train(price ~., diamonds,
method = "lm",
trControl = trainControl(
method = "cv",
number = 10,
verboseIter = FALSE
))
p4 <- predict(mod4, diamonds)
p4 <- predict(mod4, diamonds)
error4 <- p4 - diamonds$price[-dtest]
rmse4 <- sqrt(mean(error4^2))
data(boston)
data("boston")
data(Boston)
data("Boston")
# dependencies
library("dplyr")
library("ggplot2")
library("mlbench")
library("MASS")
library("modeldata")
library("class")
library("caret")
data("Boston")
# dependencies
library("shiny")
library("tidyverse")
## set working directory
setwd("C:/Github/Portfolio/_data/baby_names/04_baby_names")
## get all .txt files in directory
dir <- list.files(pattern="\\.txt$")
## read txt files, separating by comma
data <- lapply(dir, read.delim, sep=",", header=FALSE)
## set working directory
setwd("C:/Github/Portfolio/_data/baby_names")
## get all .txt files in directory
dir <- list.files(pattern="\\.txt$")
## read txt files, separating by comma
data <- lapply(dir, read.delim, sep=",", header=FALSE)
## initialize dataframe
datjoin <- as.data.frame(data[1]) %>%
rename(Name = "V1",
Gender = "V2",
Count = "V3") %>%
mutate(Year = 1880)
mdat <- subset(datjoin, Gender == "M")
## random name sample
rnames <- sample(datjoin$Name, 30)
## random name sample
rnames <- as.data.frame(sample(datjoin$Name, 30))
View(rnames)
## random name sample
rnames <- as.data.frame(sample(datjoin$Name, 30)) %>%
rename(Name = "sample(datjoin$Name, 30)")
write.csv(rnames, "sc_testdata.csv")
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
# test data
tpath <- "C:/Github/Portfolio/Apps/seating_chart/sc_testdata.csv"
read.csv(tpath)
tdat <- read.csv(tpath)
tdat <- read.csv(tpath) %>%
mutate(Seat = c(1:nrow(.)))
View(tdat)
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')
runApp('C:/Github/Portfolio/Apps/seating_chart')

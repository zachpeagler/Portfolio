axis.text.x = element_text(size=24, family="mont"),
axis.text.y = element_text(size=12, family="mont"),
axis.title = element_text(size=28, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## Density plots for sugar by treatment across no BER tomatoes (exploratory)
ggplot(data=Fl_data_no_BER, aes(x=sugar_avg, y = Treatment, color=Treatment, fill=Treatment))+
geom_density_ridges()+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
#xlim(-0.25, 1.5)+
ylab("Density")+
xlab("Sugar Concentration (%)")+
theme_minimal()+
labs(
title=str_wrap("Sugar Concentration Density for Inoculation Treatments in Tomato", 40)
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", lineheight = 0.5),
axis.title.y = element_text(size=0),
axis.text = element_text(size=24, family="mont"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## Density plots for sugar by plant across no BER tomatoes (exploratory)
ggplot(data=Fl_data_no_BER, aes(x=sugar_avg, y = plant_fac, color=Treatment, fill=Treatment))+
geom_density_ridges()+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
xlim(3, 9)+
ylab("Plant")+
xlab("Sugar Concentration (%)")+
theme_minimal()+
labs(
title=str_wrap("Sugar Concentration Density for Individual Plants Across Inoculation Treatments in Tomato", 50)
)+
theme(
legend.position="right",
text = element_text(size=24, family="mont", lineheight = 0.5),
axis.text.y = element_text(size=12, family="mont"),
axis.title = element_text(size=28, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## scatter plot of sugar by mass grouped and facet wrapped by treatment
ggplot(data=Fl_data_no_BER, aes(x=mass, y=sugar_avg,
fill=Treatment, shape=Treatment,
color=Treatment))+
geom_point()+
scale_color_manual(values=four_colors)+
scale_fill_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
ylab("Sugar Concentration (%)")+
xlab("Tomato Mass (g)")+
theme_minimal()+
facet_wrap(~Treatment)+
labs(
title="Tomato Sugar Concentration by Mass"
)+
theme(
legend.position="right",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## scatter plot of ripeness by 'days from harvest to analysis' grouped by treatment (exploratory, to see how delayed analysis may affect sugar content [hopefully it doesn't])
ggplot(data=Fl_data_no_BER, aes(x=d_diff, y=ripeness,
fill=Treatment, shape=Treatment,
color=Treatment))+
geom_jitter()+
scale_color_manual(values=four_colors)+
scale_fill_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
ylab("Ripeness")+
xlab("Days from Harvest to Analysis")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title="Tomato Ripeness by Days from Harvest to Analysis"
)+
theme(
legend.position="right",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## scatter plot of sugar by days from harvest to analysis grouped by treatment (exploratory, to see how delayed analysis may affect sugar content [hopefully it doesn't])
ggplot(data=Fl_data_no_BER, aes(x=d_diff, y=sugar_avg,
fill=Treatment, shape=Treatment,
color=Treatment))+
geom_jitter()+
scale_fill_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
scale_color_manual(values=four_colors)+
ylab("Sugar Concentration (%)")+
xlab("Days from Harvest to Analysis")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title="Tomato Sugar Concentration by Days from Harvest to Analysis"
)+
theme(
legend.position="right",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## Treatment grouped fisher test and row-wise fisher test for BER
sum_BER_tab <- as.table(cbind(Fl_data_summary$Treatment,
Fl_data_summary$BER_sum))
fisher.test(Fl_data_summary$BER_sum, y=Fl_data_summary$Treatment)
row_wise_fisher_test(xtab = sum_BER_tab)
## Treatment grouped fishers exact test on fruit
sum_fruit_tab <- as.table(cbind(Fl_data_summary$Treatment,
Fl_data_summary$fruit_sum))
fisher.test(Fl_data_summary$fruit_sum, y=Fl_data_summary$Treatment)
row_wise_fisher_test(xtab = sum_fruit_tab)
## Treatment grouped fishers exact test on fungus
sum_fungus_tab <- as.table(cbind(Fl_data_summary$Treatment,
Fl_data_summary$fungus_sum))
fisher.test(Fl_data_summary$fungus_sum, y=Fl_data_summary$Treatment)
row_wise_fisher_test(xtab = sum_fungus_tab)
## Treatment grouped fishers exact test on cracking
sum_cracking_tab <- as.table(cbind(Fl_data_summary$Treatment,
Fl_data_summary$cracking_sum))
fisher.test(Fl_data_summary$cracking_sum, y=Fl_data_summary$Treatment)
row_wise_fisher_test(xtab = sum_cracking_tab)
## Mass bin grouped fishers exact test on BER
mb_BER_tab <- as.table(cbind(Fl_data_mb$Treatment, Fl_data_mb$BER_sum))
fisher.test(Fl_data_mb$BER_sum, y=Fl_data_mb$Treatment)
row_wise_fisher_test(xtab = mb_BER_tab)
## Mass bin grouped fishers exact test on fruit
mb_fruit_tab <- as.table(cbind(Fl_data_mb$Treatment, Fl_data_mb$fruit_sum))
fisher.test(Fl_data_mb$fruit_sum, y=Fl_data_mb$Treatment)
row_wise_fisher_test(xtab = mb_fruit_tab)
## Mass bin grouped fishers exact test on fungus
mb_fungus_tab <- as.table(cbind(Fl_data_mb$Treatment, Fl_data_mb$fungus_sum))
fisher.test(Fl_data_mb$fungus_sum, y=Fl_data_mb$Treatment)
row_wise_fisher_test(xtab = mb_fungus_tab)
## Mass bin grouped fishers exact test on cracking
mb_cracking_tab <- as.table(cbind(Fl_data_mb$Treatment,
Fl_data_mb$cracking_sum))
fisher.test(Fl_data_mb$cracking_sum, y=Fl_data_mb$Treatment)
row_wise_fisher_test(xtab = mb_cracking_tab)
## probability of BER for each mass bin
ggplot(data=Fl_data_mb, aes(x=mass_bin, y=pBER, fill=mass_bin))+
geom_col()+
ylim(0, 50)+
scale_fill_manual(values=ten_col)+
ylab("BER Probability (%)")+
xlab("Mass Bin (g)")+
theme_minimal()+
labs(
title="Tomato BER Probability by Mass Bin"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## Plot probability of blossom end rot by treatment as a column graph
ggplot(data=Fl_data_summary, aes(x=Treatment, y=pBER*100, fill=Treatment))+
geom_col()+
scale_fill_manual(values=four_colors)+
ylab("Percent of Fruit w/ BER")+
xlab("Treatment")+
theme_minimal()+
labs(
title="Tomato Fruit Blossom End Rot Occurrence by Treatment"
)+
theme(
legend.position="none",
text = element_text(size=30, family="mont", face="bold"),
axis.title = element_text(size=30, family = "mont", face= "bold"),
title = element_text(size=34, family="open", face="bold")
)
## Plot probability of blossom end rot by treatment as a column graph
ggplot(data=Fl_data_summary, aes(x=Treatment, y=fruit_sum, fill=Treatment))+
geom_col()+
scale_fill_manual(values=four_colors)+
ylab("Fruit Count")+
xlab("Treatment")+
theme_minimal()+
labs(
title="Total Fruit Count by Inoculation Treatment"
)+
theme(
legend.position="none",
text = element_text(size=30, family="mont", face="bold"),
axis.title = element_text(size=30, family = "mont", face= "bold"),
title = element_text(size=34, family="open", face="bold")
)
## Plot blossom end rot by treatment as a stacked bar chart
ggplot(data=Fl_data, aes(x=Treatment, y=Fl_data[order(Fl_data$BER),]$fruit, fill=BER_fac))+
geom_bar(position="stack", stat="identity")+
scale_fill_manual(values=two_colors)+
ylab("Fruit Count")+
xlab("Treatment")+
theme_minimal()+
guides(fill=guide_legend(title=str_wrap("Blossom end rot", 8)))+
labs(
title="Tomato Fruit and BER Count by Treatment"
)+
theme(
legend.position="right",
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## Plot blossom end rot by mass bin as a stacked bar chart
ggplot(data=Fl_data, aes(x=mass_bin, y=Fl_data[order(Fl_data$BER),]$fruit, fill=BER_fac))+
geom_bar(position="stack", stat="identity")+
scale_fill_manual(labels=c("No", "Yes"), values=two_colors)+
guides(fill=guide_legend(title=str_wrap("Blossom end rot", 8)))+
ylab("Fruit Count")+
xlab("Mass Bin")+
theme_minimal()+
labs(
title="Tomato Fruit and BER Count by Mass Bin"
)+
theme(
legend.position="inside",
legend.position.inside=c(.8,.7),
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.text.x = element_text(size=20, family = "mont", angle=45,
lineheight=1, hjust=1, vjust=1.3),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## Plot blossom end rot by plant as a stacked bar chart
ggplot(data=Fl_data, aes(x=plant, y=Fl_data[order(Fl_data$BER),]$fruit, fill=BER_fac))+
geom_bar(position="stack", stat="identity")+
scale_fill_manual(labels=c("No", "Yes"), values=two_colors)+
guides(fill=guide_legend(title=str_wrap("Blossom end rot", 8)))+
ylab("Fruit Count")+
xlab("Plant")+
facet_wrap(~Treatment)+
theme_minimal()+
labs(
title="Tomato Fruit and BER Count by Plant"
)+
theme(
legend.position="right",
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.text = element_text(size=16, family = "mont",
lineheight=1),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## fruit mass sum by treatment
ggplot(data=Fl_data_summary, aes(x=Treatment, y=mass_sum/1000,
fill=Treatment))+
geom_col()+
scale_fill_manual(values=four_colors)+
ylab("Total Fruit Mass (kg)")+
xlab("Treatment")+
theme_minimal()+
labs(
title="Total Tomato Fruit Harvest across Inoculation Treatments"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## fruit mass sum by plant
ggplot(data=Fl_sum_byplant, aes(x=plant, y=mass_sum/1000,
fill=Treatment))+
geom_col()+
facet_wrap(~Treatment)+
scale_fill_manual(values=four_colors)+
scale_x_discrete(name="Plant", breaks=c("3","6","9"))+
ylab("Total Fruit Mass (kg)")+
xlab("Plant")+
theme_minimal()+
labs(
title="Total Tomato Fruit Harvest across Individual Plants"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## plot of fruit mass by treatment
ggplot(data=Fl_sum_byplant, aes(x=Treatment, y=mass_sum/1000, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Mass Sum (kg)")+
xlab("Treatment")+
theme_minimal()+
labs(
title="Total Fruit Mass per Plant across Inoculation Treatments"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## plot of fruit count by treatment
ggplot(data=Fl_sum_byplant, aes(x=Treatment, y=fruit_sum, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Fruit Count")+
xlab("Treatment")+
theme_minimal()+
labs(
title="Tomato Plant Harvested Fruit Count Across Inoculation Treatments"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
Fl_avg_sums <- Fl_sum_byplant %>%
group_by(Treatment) %>%
summarize_at(vars(mass_sum), list(mean=mean, sd=sd))%>%
mutate(mean=mean/1000,
sd=sd/1000)
## mass per treatment columns with error bars
ggplot(data=Fl_avg_sums, aes(x=Treatment, y=mean, fill=Treatment))+
geom_col()+
geom_errorbar( aes(ymin=mean-sd, ymax=mean+sd), width=0.4)+
scale_fill_manual(values=four_colors)+
ylab("Total Mass (kg)")+
xlab("Treatment")+
theme_minimal()+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
#Kruskal-Wallis on mass as a function of Treatment
kruskal.test(mass ~ Treatment, data=Fl_data)
kruskal.test(mass_sum ~ Treatment, data=Fl_sum_byplant)
# Pairwise wilcox test on mass as a function of treatment
pairwise.wilcox.test(Fl_data$mass, Fl_data$Treatment)
pairwise.wilcox.test(Fl_sum_byplant$mass_sum, Fl_sum_byplant$Treatment)
mT_glm_s <- summary(mT_glm <- glm(mass~Treatment, data=Fl_data, family=Gamma(link="log")))
mT_glm_pseudoR2 <- (mT_glm_s$null.deviance - mT_glm_s$deviance)/mT_glm_s$null.deviance
summary(glm(mass_sum~Treatment, data=Fl_sum_byplant, family=Gamma(link="log")))
## plot of mass by treatment with box plots, violins, and jittered points
ggplot(data=Fl_data_no_BER, aes(x=Treatment, y=mass, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
stat_compare_means(label.x=3.25, label.y=425, size=8, family="mont")+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Tomato Mass (g)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title="Tomato Mass by Microbial Inoculation Timing"
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## plot of mass mean per plant by treatment with box plots, violins, and jittered points
ggplot(data=Fl_means_byplant, aes(x=Treatment, y=mass_mean, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
stat_compare_means(label.x=3.25, size=8, family="mont")+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Tomato Mass (g)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title=str_wrap("Mean Tomato Mass by Plant across Microbial Inoculation Timing", 50)
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
# Linear mixed model of sugar as a function of treatment with plant as a random effect
summary(model_sugar_no_BER <- (lmer(
sugar_avg ~ Treatment + (1| plant_fac),
data = Fl_data_no_BER)))
# Linear mixed model of sugar as a function of treatment with plant as a random effect
#summary(model_sugar_no_BER <- (lmer(
#  sugar_avg ~ Treatment + (1| plant_fac),
#  data = Fl_data_no_BER)))
#summary(lm_sugar_no_BER <- (lm(
#  sugar_avg ~ Treatment,
#  data = Fl_data_no_BER)))
#TUKEY (more or less) on the LMER
difflsmeans(model_sugar_no_BER)
# Linear mixed model of sugar as a function of treatment with plant as a random effect
#summary(model_sugar_no_BER <- (lmer(
#  sugar_avg ~ Treatment + (1| plant_fac),
#  data = Fl_data_no_BER)))
#summary(lm_sugar_no_BER <- (lm(
#  sugar_avg ~ Treatment,
#  data = Fl_data_no_BER)))
#TUKEY (more or less) on the LMER
#difflsmeans(model_sugar_no_BER)
## plot sugar by treatment as a boxplot with violins and jitter
ggplot(data=Fl_data_no_BER, aes(x=Treatment, y=sugar_avg, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
stat_compare_means(label.x=3.5, label.y=11, size=8, family="mont")+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Sugar Concentration (%)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title=str_wrap("Tomato Sugar Concentration by Microbial Inoculation Timing", 40)
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
sugar_kw <- kruskal.test(sugar_avg_mean~Treatment, Fl_means_byplant)
## plot sugar means per plant by treatment as a boxplot with violins and jitter
ggplot(data=Fl_means_byplant, aes(x=Treatment, y=sugar_avg_mean, color=Treatment, fill=Treatment))+
geom_violin(alpha=0.5)+
geom_boxplot(width=0.2, alpha=0.5)+
geom_jitter(width=0.1)+
stat_compare_means(comparisons = list(c("Control","Germination"),c("Control", "Transplantation"), c("Control", "Germ+Trans")), size=8, family="mont")+
annotate("text", x=3.5, y=8.5, family="mont", label= paste("Kruskal-Wallis, p=", round(sugar_kw$p.value, 4)), size=8)+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Sugar Concentration (%)")+
xlab("Treatment")+
theme_minimal()+
#facet_wrap(~Treatment)+
labs(
title=str_wrap("Tomato Plant Sugar Concentration Mean by Microbial Inoculation Timing", 40)
)+
theme(
legend.position="none",
text = element_text(size=24, family="mont", face="bold", lineheight=0.5),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
# dependencies
library(shiny)
library(dplyr)
library(bslib)
library(scico)
dat <- iris
library(tidyverse)
vars <- colnames(iris)
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
palettes <- scico_palette_names()
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
shiny::runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/03_scatter')
shiny::runApp('C:/Github/App-A-Day/01_meteorites')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants 2024')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants 2024')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants 2024')
runApp('C:/Github/App-A-Day/04_baby_names')
runApp('C:/Github/App-A-Day/04_baby_names')
runApp('C:/Github/App-A-Day/04_baby_names')
## set working directory
setwd("C:/Github/App-A-Day/data/baby_names")
## get all .txt files in directory
dir <- list.files(pattern="\\.txt$")
